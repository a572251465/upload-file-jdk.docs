import{_ as t,c as e,o as a}from"./chunks/framework.DE0EzH0a.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"“大文件上传”  解决方案","tagline":"开源不易, 既然来了麻烦点击star吧 👇👇👇👇👇","actions":[{"theme":"brand","text":"快速开始","link":"/quick-start"},{"theme":"alt","text":"插件配置","link":"/jdk-config"},{"theme":"alt","text":"如何引入","link":"/use"},{"theme":"alt","text":"springboot 中间件","link":"/springboot-middleware"},{"theme":"alt","text":"点按钮, 开始 star","link":"https://github.com/a572251465/upload-file-jdk"}]},"features":[{"title":"功能丰富","details":"秒传, 断点续传, 暂停, 相同文件互斥上传, ”sha26 Hash摘要算法“ 队列, 基于 “漏斗算法” 的并发限制 等"},{"title":"持久化","details":"基于 indexedDB 实现了持久化, 同时支持将每个文件Hash值 进行持久化，避免二次Hash计算"},{"title":"丰富的Demo","details":"不仅提供了前端 jdk，而且提供了 node版，Java版后端Demo"},{"title":"兼容性","details":"同时支持 http 以及 https，针对 WebWorker做优雅降级"},{"title":"大文件上传","details":"通过 webWorker方式支持大文件计算Hash值（目前通过了2.7G文件测试）"},{"title":"网络动态化","details":"实时监控网络情况，动态控制上传速度, 一旦并发上传产生，多个文件会平分网络"},{"title":"严格测试","details":"1. 并发控制情况下, 满足同时上传100+个文件 2. 单个文件大小最高2.7G"},{"title":"周边生态","details":"1. 提供了后端 SpringBoot 中间件, 后续提供更多不同语言的生态"}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),i={name:"index.md"};function s(l,o,n,d,r,h){return a(),e("div")}const p=t(i,[["render",s]]);export{c as __pageData,p as default};
