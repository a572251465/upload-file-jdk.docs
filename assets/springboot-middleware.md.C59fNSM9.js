import{_ as s,c as i,o as a,a1 as t}from"./chunks/framework.DE0EzH0a.js";const g=JSON.parse('{"title":"springboot 中间件","description":"","frontmatter":{},"headers":[],"relativePath":"springboot-middleware.md","filePath":"springboot-middleware.md"}'),e={name:"springboot-middleware.md"},l=t(`<h1 id="springboot-中间件" tabindex="-1">springboot 中间件 <a class="header-anchor" href="#springboot-中间件" aria-label="Permalink to &quot;springboot 中间件&quot;">​</a></h1><blockquote><p>插件<code>upload-file-jdk</code> 除了前端的解决方案，同时也提供了后端周边，例如：可以直接引用 spring boot 中间件</p></blockquote><h2 id="如何引入" tabindex="-1">如何引入 <a class="header-anchor" href="#如何引入" aria-label="Permalink to &quot;如何引入&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;io.github.a572251465&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;upload-file-jdk-spring-boot-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 可以随意指定版本 建议指定最高版本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.0.5&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><h3 id="简单配置" tabindex="-1">简单配置 <a class="header-anchor" href="#简单配置" aria-label="Permalink to &quot;简单配置&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lvdaxian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    upload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 配置保存到磁盘</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        enabledType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disk</span></span></code></pre></div><h3 id="详细配置" tabindex="-1">详细配置 <a class="header-anchor" href="#详细配置" aria-label="Permalink to &quot;详细配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>默认值</th><th>可选项</th></tr></thead><tbody><tr><td><code>io.lvdaxian.upload.file.enabled-type</code></td><td>启动哪种方式保存文件</td><td><code>-</code></td><td><code>disk</code>/ <code>minio</code>/ <code>custom</code></td></tr><tr><td><code>io.lvdaxian.upload.file.enabled-logger</code></td><td>是否支持输出 logger</td><td><code>false</code></td><td><code>-</code></td></tr><tr><td><code>io.lvdaxian.upload.file.http-interceptor-order</code></td><td>拦截器顺序</td><td><code>10</code></td><td><code>-</code></td></tr><tr><td><code>io.lvdaxian.upload.file.context-prefix</code></td><td>请求公共前缀</td><td><code>&quot;&quot;</code></td><td><code>-</code></td></tr><tr><td><code>※1 io.lvdaxian.upload.file.minio.access-key</code></td><td>MINIO 的accessKey</td><td><code>-</code></td><td><code>-</code></td></tr><tr><td><code>※1 io.lvdaxian.upload.file.minio.secret-key</code></td><td>MINIO 的secretKey</td><td><code>-</code></td><td><code>-</code></td></tr><tr><td><code>※1 io.lvdaxian.upload.file.minio.bucket-name</code></td><td>MINIO 的桶名称</td><td><code>uploadfiletmpdir</code></td><td><code>-</code></td></tr><tr><td><code>※1 io.lvdaxian.upload.file.minio.endpoint</code></td><td>MINIO 的入口点</td><td><code>-</code></td><td><code>-</code></td></tr><tr><td><code>※2 io.lvdaxian.upload.file.disk.save-dir</code></td><td>磁盘保存目录</td><td><code>uploadFileTmpDir</code></td><td><code>-</code></td></tr><tr><td><code>※2 io.lvdaxian.upload.file.disk.merge-file-way</code></td><td>文件合并方式</td><td><code>ZERO_COPY_WAY</code></td><td><code>ZERO_COPY_WAY</code>/ <code>NORMAL_WAY</code></td></tr><tr><td><code>※2 io.lvdaxian.upload.file.disk.enabled-concurrency-merge</code></td><td>是否开启并发合并</td><td><code>false</code></td><td><code>-</code></td></tr><tr><td><code>※2 io.lvdaxian.upload.file.disk.delay-concurrency-merge-time</code></td><td>并发合并 初次延迟时间</td><td><code>20</code></td><td><code>-</code></td></tr><tr><td><code>※2 io.lvdaxian.upload.file.disk.thread-sleep-time</code></td><td>并发线程 执行休眠时间</td><td><code>5</code></td><td><code>-</code></td></tr></tbody></table><ul><li><code>※1</code> MINIO 的配置参数，只有<code>enabled-type = &#39;minio&#39;</code>的时候 才有效</li><li><code>※2</code> DISK 的配置参数，只有<code>enabled-type = &#39;disk&#39;</code>的时候 才有效</li></ul><h2 id="如何拿到上传的文件" tabindex="-1">如何拿到上传的文件 <a class="header-anchor" href="#如何拿到上传的文件" aria-label="Permalink to &quot;如何拿到上传的文件&quot;">​</a></h2><blockquote><p>既然我们已经将文件通过断点续传的方式上传了，但是我们怎么拿到文件呢</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 该DI 会在启动器中 直接注入，直接使用即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Resource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UploadFileUtils fileUtils;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/getFile/{filename}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filename&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其实真正需要调用的是这个方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // filename 是断点续传上传后的文件名字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 应该是前端给后端的，后端直接拿这个名字调用该接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MultipartFile file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMultipartFileByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // todo 拿到 file 后进行后续的操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="如何-自定义" tabindex="-1">如何 自定义 <a class="header-anchor" href="#如何-自定义" aria-label="Permalink to &quot;如何 自定义&quot;">​</a></h2><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  lvdaxian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    upload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 配置保存到磁盘</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        enabledType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">custom</span></span></code></pre></div><h3 id="重写接口" tabindex="-1">重写接口 <a class="header-anchor" href="#重写接口" aria-label="Permalink to &quot;重写接口&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomOperate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOperate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UploadFileUtilsCustomImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UploadFileUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h2 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h2><ul><li><code>1.0.1</code> 暂时废弃</li><li><code>1.0.2</code> 暂时废弃</li><li><code>1.0.3</code> 暂时废弃</li><li><code>1.0.4</code> 暂时废弃</li><li><code>1.0.5</code> 实现了基于<code>disk</code>的断点续传的后端中间件, 已经部署生产了</li><li><code>1.0.6</code> 暂时废弃</li><li><code>1.0.7</code> 实现了对 <code>minio</code> 的支持，以及文件合并的时候 支持 <code>零拷贝</code></li></ul>`,20),n=[l];function d(p,h,k,o,r,c){return a(),i("div",null,n)}const y=s(e,[["render",d]]);export{g as __pageData,y as default};
